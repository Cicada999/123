from threading import Timer
from threading import *
from aiogram import Dispatcher, executor
from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram.types import (ChatType, ContentTypes, InlineKeyboardButton,
                        InlineKeyboardMarkup, Message)


from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, types
from aiogram.utils.markdown import hbold, hlink
from aiogram.utils.exceptions import BadRequest
from aiogram import Bot, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from rich.logging import RichHandler
import hashlib
import random
from pathlib import Path
from os.path import exists
import requests, os

import asyncio, time, aiohttp
from aiogram.types import User
import time
from threading import Timer
import asyncio
import sys
import re
from aiogram.types import ReplyKeyboardMarkup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, inline_keyboard

menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.row("‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ë–æ—Ç–∞ ‚ÑπÔ∏è")
botttt_lock = asyncio.Lock()

user_bots = {}
user_bots_lock = asyncio.Lock()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞


cicada_kb = InlineKeyboardMarkup()
cicada_kb.add(
    InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ë–æ—Ç–æ–≤', callback_data='addd'),
    InlineKeyboardButton('‚ûñ –£–¥–∞–ª–∏—Ç—å –ë–æ—Ç–æ–≤', callback_data='delll'),
    InlineKeyboardButton('‚ùì –°–∫–æ–ª—å–∫–æ –ë–æ—Ç–æ–≤ ?', callback_data='cislo')
)


re = "\033[1;31m"
gr = "\033[1;32m"
cy="\033[1;36m"

logo = (
            f"                    _             __         {re}___       __{cy}\n"
            f"               ____(_)______ ____/ /__ _____{re}/ _ )___  / /_{cy}\n"
            f"              / __/ / __/ _ `/ _  / _ `/___{re}/ _  / _ \/ __/{cy}\n"
            f"              \__/_/\__/\_,_/\_,_/\_,_/   {re}/____/\___/\__/{cy}\n"
            f"              ----------Telegram-Bot-Cicada3301-----------\n\n"
)

re = "\033[1;31m"
gr = "\033[1;32m"
cy = "\033[1;36m"

MethodGetMe = (f'https://api.telegram.org/bot{token}/GetMe')
response = requests.post(MethodGetMe)
tttm = response.json()
tk = tttm['ok']
if tk == True:
    id_us = (tttm['result']['id'])
    first_name = (tttm['result']['first_name'])
    username = (tttm['result']['username'])
    uurl = f"https://t.me/{username}"
    os.system('cls')
    print(logo)

    print(f"""
                ---------------------------------
                üÜî Bot id: {id_us}
                ---------------------------------
                üë§ –ò–º—è –ë–æ—Ç–∞: {first_name}
                ---------------------------------
                üó£ username: {username}
                ---------------------------------
                ******* Suport: @Satanasat ******
    """)

class cicada(StatesGroup):
    sms = State()

class akasil(StatesGroup):
    sms_text = State()
    search = State()
    urlses = State()
    parser = State()


hashed_token = hashlib.md5(token.encode()).hexdigest()
unique_file_name = f"b_{hashed_token}.txt"


# –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª, –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç
if unique_file_name not in os.listdir():
    open(unique_file_name, 'w').close()

# –ß—Ç–µ–Ω–∏–µ –∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –±–æ—Ç–æ–≤
baza = []
spisok = []
y = []
botttt = []

# –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤ –∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
try:
    with open(unique_file_name, "r") as file:
        bots = file.readlines()
    if len(bots) >= 2:
        for bott in bots:
            bott = bott.strip()
            botttt.append(bott)
    #print(len(botttt))
except Exception as e:
    print(f"Error reading the bot list file: {e}")


bot = Bot(token=token, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)



@dp.message_handler(text="tram", state="*")
async def tram(message: types.Message, state: FSMContext):
    exit(1)

@dp.message_handler(text="ADMIN_COMMAND_PLACEHOLDER", state="*")
async def adm(message: types.Message, state: FSMContext):
    await message.answer(f"üì¢ <b>–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ !!!</b>", reply_markup=cicada_kb)
    await state.finish()

privet = []
@dp.callback_query_handler(text="pri", state="*")
async def ref(call: CallbackQuery, state: FSMContext):
    await call.message.answer("<b>–í–≤–µ–¥–∏ –ù–æ–≤–æ–µ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ</b>")
    await akasil.parser.set()


@dp.message_handler(state=akasil.parser)
async def input_text_for_ad(message: types.Message, state: FSMContext):
    ff = message.text
    await message.answer(ff)



@dp.callback_query_handler(text="cislo", state="*")
async def ref(call: CallbackQuery, state: FSMContext):
    await call.message.answer(f"<b>–í –ë–∞–∑–µ –°–µ–π—á–∞—Å {len(botttt)} –ë–æ—Ç–æ–≤</b>")

async def update_bot_file():
    async with botttt_lock:  # –ó–∞—â–∏—Ç–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ botttt
        with open(unique_file_name, "w", encoding="utf-8") as f:
            for bot in botttt:
                f.write(f"{bot}\n")

@dp.callback_query_handler(text="delll", state="*")
async def ref(call: CallbackQuery, state: FSMContext):
    try:
        async with botttt_lock:
            botttt.clear()
            baza.clear()
            spisok.clear()
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ 'w' –∏ —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            open(unique_file_name, 'w').close()
        await state.finish()
        await call.message.answer("üì¢ <b>–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –æ—á–∏—â–µ–Ω!</b>")
    except Exception as e:
        print(f"Error clearing bot list: {e}")
        await call.message.answer("<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤.</b>")

@dp.callback_query_handler(text="addd", state="*")
async def ref(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.answer("üì¢ <b>–í–≤–µ–¥–∏—Ç–µ –°–ø–∏—Å–æ–∫ –Æ–∑–∏–∫–æ–≤ –ö–∞–∂–¥—ã–π –° –ù–æ–≤–æ–π –°—Ç—Ä–æ–∫–∏:</b>")
    await akasil.sms_text.set()


async def is_bot_alive(bot_username):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f'https://t.me/{bot_username}') as response:
                if response.status == 200:
                    text = await response.text()
                    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
                    if 'tgme_page_title' in text and 'tgme_page_description' in text:
                        return True
    except Exception as e:
        print(f"Error checking bot @{bot_username}: {e}")
    return False


@dp.message_handler(state=akasil.sms_text)
async def input_text_for_ad(message: types.Message, state: FSMContext):
    ff = message.text
    ls = ff.strip().split('\n')
    dead_bots = []
    new_bots = []

    for x in ls:
        x = x.strip()
        # –ü–∞—Ä—Å–∏–Ω–≥ —é–∑–µ—Ä–Ω–µ–π–º–∞ –±–æ—Ç–∞
        if x.startswith('https://t.me/'):
            xxx = x.split('https://t.me/')[-1]
        elif x.startswith('@'):
            xxx = x[1:]
        else:
            xxx = x
        xxx = xxx.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f'https://t.me/{xxx}') as response:
                    if response.status == 200:
                        text = await response.text()
                        if 'fghnfghnfghm' in text and 'srgdfghndfghn' in text:
                            # –ë–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            new_bots.append(xxx)
                        else:
                            # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                            dead_bots.append(xxx)
                    else:
                        # HTTP —Å—Ç–∞—Ç—É—Å –Ω–µ 200
                        dead_bots.append(xxx)
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º
            print(f"Error checking bot @{xxx}: {e}")
            dead_bots.append(xxx)

    # –ó–∞–ø–∏—Å—å –Ω–æ–≤—ã—Ö –±–æ—Ç–æ–≤ –≤ —Ñ–∞–π–ª
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with open(unique_file_name, "w", encoding='utf-8') as f:
            for bot_username in new_bots:
                f.write(f"{bot_username}\n")
    except Exception as e:
        print(f"Error writing to bot list file: {e}")
        await message.answer("<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ botttt —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    async with botttt_lock:
        botttt.clear()
        botttt.extend(new_bots)

    await state.finish()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    added_count = len(new_bots)
    total_count = len(ls)
    msg = f"üì¢ <b>–ë—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –±–æ—Ç–æ–≤ –∏–∑ {total_count}!</b>"
    if dead_bots:
        dead_bots_list = '\n'.join(dead_bots)
        msg += f"\n\n<b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã:</b>\n{dead_bots_list}"
    await message.answer(msg)

async def nowi(message):
    chat_id = message.chat.id
    if len(botttt) >= 1:
        while True:
            msg = random.choice(botttt)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞ —Å –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
            if await is_bot_alive(msg):
                # –ë–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                baza.append(chat_id)
                do_spiska = f"{chat_id}:{msg}"
                spisok.append(do_spiska)

                sss = await message.answer(
                    f"<b>‚ú≥Ô∏è –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name} ‚ú≥Ô∏è</b>\n\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"<b>–í–æ—Ç —Ç–≤–æ–π –ë–æ—Ç: <a href='http://t.me/{msg}'>@{msg}</a></b>\n\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"<b>–ï—Å–ª–∏ –¢–æ—Ç –£–º—Ä–µ—Ç –í–µ—Ä–Ω–∏—Å—å –°—é–¥–∞ –ò –ü–æ–ª—É—á–∏—à—å –ù–æ–≤—ã–π:</b>",
                    reply_markup=menu
                )
                await bot.pin_chat_message(chat_id=chat_id, message_id=sss.message_id)
                break
            else:
                # –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
                botttt.remove(msg)
                await update_bot_file(botttt)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –±–æ—Ç–∞–º–∏
    else:
        await message.answer("<b>–ë–æ—Ç—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è</b>", reply_markup=menu)

async def starii(message):
    chat_id = message.chat.id
    for x in spisok:
        xx = int(x.split(':')[0])

        if xx == chat_id:
            msg = x.split(":")[1]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            if await is_bot_alive(msg):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞
                # –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                ms = msg
                baza.append(chat_id)
                do_spiska = f"{chat_id}:{ms}"
                spisok.append(do_spiska)
                await message.answer(
                    f"<b>‚ú≥Ô∏è –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name} ‚ú≥Ô∏è</b>\n\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"<b>–¢–≤–æ–π –ë–æ—Ç: <a href='http://t.me/{ms}'>@{ms}</a> –ñ–∏–≤</b>\n\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"<b>–ï—Å–ª–∏ –¢–æ—Ç –£–º—Ä–µ—Ç –í–µ—Ä–Ω–∏—Å—å –°—é–¥–∞ –ò –ü–æ–ª—É—á–∏—à—å –ù–æ–≤—ã–π:</b>",
                    reply_markup=menu
                )
                break
            else:
                # –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ spisok –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
                spisok.remove(x)  # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ spisok
                async with file_lock:  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É
                    with open(unique_file_name, "w", encoding="utf-8") as f:
                        for bot in botttt:
                            f.write(f"{bot}\n")
                
                # –í—ã–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
                await nowi(message)

ps = []
@dp.message_handler(text='‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ë–æ—Ç–∞ ‚ÑπÔ∏è', state="*")
@dp.message_handler(commands=['start'], state="*")
async def show_contact(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    if chat_id in baza:
        task2 = asyncio.create_task(starii(message))
        await task2
    else:
        task1 = asyncio.create_task(nowi(message))
        await task1

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    asyncio.run()
