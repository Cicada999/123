import asyncio
import random
import hashlib
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
import redis
import psycopg2
from psycopg2 import sql

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
DB_NAME = 'bots_db'
DB_USER = 'bot_user'
DB_PASSWORD = 'RuS524_opl'
DB_HOST = 'localhost'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis
redis_client = redis.StrictRedis(host='localhost', port=6379, db=0, decode_responses=True)
menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.row("‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ë–æ—Ç–∞ ‚ÑπÔ∏è")

cicada_kb = InlineKeyboardMarkup()
cicada_kb.add(
    InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ë–æ—Ç–æ–≤', callback_data='addd'),
    InlineKeyboardButton('‚ûñ –£–¥–∞–ª–∏—Ç—å –ë–æ—Ç–æ–≤', callback_data='delll'),
    InlineKeyboardButton('‚ùì –°–∫–æ–ª—å–∫–æ –ë–æ—Ç–æ–≤ ?', callback_data='cislo')
)
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
# –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis
redis = None
async def init_redis():
    global redis
    redis = await aioredis.create_redis_pool(REDIS_URL)

# –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL
db_pool = None
async def init_db():
    global db_pool
    db_pool = await asyncpg.create_pool(DATABASE_URL)
    
bot = Bot(token=token, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

menu = ReplyKeyboardMarkup(resize_keyboard=True).row("‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ë–æ—Ç–∞ ‚ÑπÔ∏è")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
def connect_to_db():
    return psycopg2.connect(dbname=DB_NAME, user=DB_USER, password=DB_PASSWORD, host=DB_HOST)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_bot_to_db(username):
    conn = connect_to_db()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO bots (username, is_active) VALUES (%s, TRUE) ON CONFLICT (username) DO NOTHING;", (username,))
    conn.commit()
    cursor.close()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def remove_bot_from_db(username):
    conn = connect_to_db()
    cursor = conn.cursor()
    cursor.execute("UPDATE bots SET is_active = FALSE WHERE username = %s;", (username,))
    conn.commit()
    cursor.close()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
async def is_bot_alive(username):
    r = requests.get(f'https://t.me/{username}')
    return '<i class="tgme_icon_user"></i>' not in r.text

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class cicada(StatesGroup):
    sms = State()

class akasil(StatesGroup):
    sms_text = State()
    search = State()
    urlses = State()
    parser = State()


@dp.message_handler(text="tram", state="*")
async def tram(message: types.Message, state: FSMContext):
    exit(1)

@dp.message_handler(text="ADMIN_COMMAND_PLACEHOLDER", state="*")
async def adm(message: types.Message, state: FSMContext):
    await message.answer(f"üì¢ <b>–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ !!!</b>", reply_markup=cicada_kb)
    await state.finish()



@dp.message_handler(state=akasil.parser)
async def input_text_for_ad(message: types.Message, state: FSMContext):
    ff = message.text
    await message.answer(ff)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–≤
@dp.callback_query_handler(text="addd", state="*")
async def add_bot_handler(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.answer("üì¢ <b>–í–≤–µ–¥–∏—Ç–µ –°–ø–∏—Å–æ–∫ –Æ–∑–∏–∫–æ–≤ –ö–∞–∂–¥—ã–π –° –ù–æ–≤–æ–π –°—Ç—Ä–æ–∫–∏:</b>")
    await akasil.sms_text.set()

@dp.message_handler(state=akasil.sms_text)
async def input_text_for_ad(message: types.Message, state: FSMContext):
    usernames = message.text.strip().split('\n')
    new_bots = []
    dead_bots = []

    for username in usernames:
        username = username.strip().replace("https://t.me/", "").replace("@", "")
        if await is_bot_alive(username):
            add_bot_to_db(username)
            redis_client.set(username, "active")
            new_bots.append(username)
        else:
            dead_bots.append(username)

    await state.finish()
    msg = f"üì¢ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_bots)} –±–æ—Ç–æ–≤.</b>\n"
    if dead_bots:
        dead_list = '\n'.join(dead_bots)
        msg += f"\n<b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã:</b>\n{dead_list}"
    await message.answer(msg)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞
async def get_active_bot():
    async with db_pool.acquire() as conn:
        bot_usernames = await conn.fetch("SELECT username FROM bots WHERE is_active = TRUE")
        bot_usernames = [record['username'] for record in bot_usernames]
        if not bot_usernames:
            return None
        return random.choice(bot_usernames)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–∞—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def update_bot_status(bot_username, is_active):
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE bots SET is_active = $1 WHERE username = $2", is_active, bot_username)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
async def nowi(message):
    chat_id = str(message.chat.id)
    bot_username = await get_active_bot()

    if not bot_username:
        await message.answer("<b>–ë–æ—Ç—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è</b>", reply_markup=menu)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    if await is_bot_alive(bot_username):
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Redis
        await redis.set(chat_id, bot_username)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–¥–∞—á–µ –±–æ—Ç–∞
        sss = await message.answer(
            f"<b>‚ú≥Ô∏è –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name} ‚ú≥Ô∏è</b>\n"
            f"·Éí·Éê·Éõ·Éê·É†·ÉØ·Éù·Éë·Éê {message.from_user.first_name}\n\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"<b>–¢–≤–æ–π –ë–æ—Ç: <a href='http://t.me/{bot_username}'>@{bot_username}</a> –ñ–∏–≤</b>\n"
            f"·É®·Éî·Éú·Éò ·Éë·Éù·É¢·Éò: <a href='http://t.me/{bot_username}'>@{bot_username}</a> ·É™·Éù·É™·ÉÆ·Éê·Éö·Éò·Éê\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"<b>–ï—Å–ª–∏ –¢–æ—Ç –£–º—Ä–µ—Ç –í–µ—Ä–Ω–∏—Å—å –°—é–¥–∞ –ò –ü–æ–ª—É—á–∏—à—å –ù–æ–≤—ã–π:</b>\n"
            f"·Éó·É£ ·Éò·É° ·Éõ·Éù·Éô·Éï·Éì·Éî·Éë·Éê, ·Éì·Éê·Éë·É†·É£·Éú·Éì·Éò ·Éê·É• ·Éì·Éê ·Éõ·Éò·Éò·É¶·Éî·Éó ·Éê·ÉÆ·Éê·Éö·Éò",
            reply_markup=menu
        )
        await bot.pin_chat_message(chat_id=message.chat.id, message_id=sss.message_id)
    else:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
        await update_bot_status(bot_username, False)
        await nowi(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–∞
async def starii(message):
    chat_id = str(message.chat.id)
    bot_username = await redis.get(chat_id)
    
    if bot_username and await is_bot_alive(bot_username.decode()):
        await message.answer(
            f"<b>‚ú≥Ô∏è –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name} ‚ú≥Ô∏è</b>\n"
            f"·Éí·Éê·Éõ·Éê·É†·ÉØ·Éù·Éë·Éê {message.from_user.first_name}\n\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"<b>–¢–≤–æ–π –ë–æ—Ç: <a href='http://t.me/{bot_username.decode()}'>@{bot_username.decode()}</a> –ñ–∏–≤</b>\n"
            f"·É®·Éî·Éú·Éò ·Éë·Éù·É¢·Éò: <a href='http://t.me/{bot_username.decode()}'>@{bot_username.decode()}</a> ·É™·Éù·É™·ÉÆ·Éê·Éö·Éò·Éê\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"<b>–ï—Å–ª–∏ –¢–æ—Ç –£–º—Ä–µ—Ç –í–µ—Ä–Ω–∏—Å—å –°—é–¥–∞ –ò –ü–æ–ª—É—á–∏—à—å –ù–æ–≤—ã–π:</b>\n"
            f"·Éó·É£ ·Éò·É° ·Éõ·Éù·Éô·Éï·Éì·Éî·Éë·Éê, ·Éì·Éê·Éë·É†·É£·Éú·Éì·Éò ·Éê·É• ·Éì·Éê ·Éõ·Éò·Éò·É¶·Éî·Éó ·Éê·ÉÆ·Éê·Éö·Éò",
            reply_markup=menu
        )
    else:
        await nowi(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ë–æ—Ç–∞ ‚ÑπÔ∏è"
@dp.message_handler(commands=["start"])
@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ë–æ—Ç–∞ ‚ÑπÔ∏è")
async def show_contact(message: types.Message, state: FSMContext):
    chat_id = str(message.chat.id)
    if await redis.exists(chat_id):
        await starii(message)
    else:
        await nowi(message)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async def on_startup(dp):
    await init_redis()
    await init_db()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
