import asyncio
import hashlib
import random
import re
import sys

import aiohttp
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup,
                           ReplyKeyboardMarkup)
from aiogram.utils.executor import start_polling

import requests

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
DATABASE_URL = "postgresql://bot_user:RuS524_opl@localhost:5432/bots_db"

bot = Bot(token=token, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
db_pool = None

menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.row("‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ë–æ—Ç–∞ ‚ÑπÔ∏è")

botttt_lock = asyncio.Lock()

cicada_kb = InlineKeyboardMarkup()
cicada_kb.add(
    InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ë–æ—Ç–æ–≤', callback_data='addd'),
    InlineKeyboardButton('‚ûñ –£–¥–∞–ª–∏—Ç—å –ë–æ—Ç–æ–≤', callback_data='delll'),
    InlineKeyboardButton('‚ùì –°–∫–æ–ª—å–∫–æ –ë–æ—Ç–æ–≤ ?', callback_data='cislo')
)

class cicada(StatesGroup):
    sms = State()

class akasil(StatesGroup):
    sms_text = State()
    parser = State()

# –•–µ—à–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã
hashed_token = hashlib.md5(token.encode()).hexdigest()
bot_table_name = f"bot_{hashed_token}"

baza = []
spisok = []
botttt = []

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
async def create_tables():
    async with db_pool.acquire() as conn:
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–æ—Ç–æ–≤
        await conn.execute(f'''
            CREATE TABLE IF NOT EXISTS {bot_table_name} (
                id SERIAL PRIMARY KEY,
                username TEXT UNIQUE NOT NULL
            );
        ''')
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–∫–∏ chat_id –∏ –≤—ã–¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS spisok (
                chat_id BIGINT NOT NULL,
                bot_id TEXT NOT NULL,
                username TEXT NOT NULL,
                PRIMARY KEY (chat_id, bot_id)
            );
        ''')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def load_botttt():
    async with botttt_lock:
        botttt.clear()
        async with db_pool.acquire() as conn:
            rows = await conn.fetch(f'SELECT username FROM {bot_table_name};')
            botttt.extend([row['username'] for row in rows])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def update_botttt(new_bots):
    async with db_pool.acquire() as conn:
        await conn.execute(f'DELETE FROM {bot_table_name};')
        for username in new_bots:
            await conn.execute(f'''
                INSERT INTO {bot_table_name} (username)
                VALUES ($1)
                ON CONFLICT (username) DO NOTHING;
            ''', username)
    await load_botttt()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∂–∏–≤ –ª–∏ –±–æ—Ç
async def is_bot_alive(bot_username):
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://t.me/{bot_username}') as resp:
            text = await resp.text()
            return '<i class="tgme_icon_user"></i>' not in text

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ë–æ—Ç–∞ ‚ÑπÔ∏è"
@dp.message_handler(commands=['start'], state="*")
@dp.message_handler(text='‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ë–æ—Ç–∞ ‚ÑπÔ∏è', state="*")
async def show_contact(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    await load_botttt()
    if chat_id in baza:
        await starii(message)
    else:
        await nowi(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
async def nowi(message):
    chat_id = message.chat.id
    if len(botttt) >= 1:
        while True:
            msg = random.choice(botttt)

            if await is_bot_alive(msg):
                baza.append(chat_id)
                do_spiska = f"{chat_id}:{msg}"
                spisok.append(do_spiska)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                async with db_pool.acquire() as conn:
                    await conn.execute('''
                        INSERT INTO spisok (chat_id, bot_id, username)
                        VALUES ($1, $2, $3)
                        ON CONFLICT (chat_id, bot_id) DO UPDATE SET username = $3;
                    ''', chat_id, hashed_token, msg)

                sss = await message.answer(
                    f"<b>‚ú≥Ô∏è –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name} ‚ú≥Ô∏è</b>\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"<b>–¢–≤–æ–π –ë–æ—Ç: <a href='http://t.me/{msg}'>@{msg}</a> –ñ–∏–≤</b>\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"<b>–ï—Å–ª–∏ —Ç–æ—Ç —É–º—Ä–µ—Ç, –≤–µ—Ä–Ω–∏—Å—å —Å—é–¥–∞ –∏ –ø–æ–ª—É—á–∏—à—å –Ω–æ–≤—ã–π</b>",
                      reply_markup=menu
                  )
                await bot.pin_chat_message(chat_id=chat_id, message_id=sss.message_id)
                break
            else:
                # –£–¥–∞–ª—è–µ–º –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                async with db_pool.acquire() as conn:
                    await conn.execute(f'''
                        DELETE FROM {bot_table_name} WHERE username = $1;
                    ''', msg)
                await load_botttt()
    else:
        await message.answer("<b>–ë–æ—Ç—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è</b>", reply_markup=menu)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–∞–Ω–µ–µ –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
async def starii(message):
    chat_id = message.chat.id
    async with db_pool.acquire() as conn:
        row = await conn.fetchrow('''
            SELECT username FROM spisok WHERE chat_id = $1 AND bot_id = $2;
        ''', chat_id, hashed_token)
    if row:
        msg = row['username']
        if await is_bot_alive(msg):
            await message.answer(
                f"<b>‚ú≥Ô∏è –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name} ‚ú≥Ô∏è</b>\n"
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"<b>–¢–≤–æ–π –ë–æ—Ç: <a href='http://t.me/{msg}'>@{msg}</a> –ñ–∏–≤</b>\n"
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"<b>–ï—Å–ª–∏ —Ç–æ—Ç —É–º—Ä–µ—Ç, –≤–µ—Ä–Ω–∏—Å—å —Å—é–¥–∞ –∏ –ø–æ–ª—É—á–∏—à—å –Ω–æ–≤—ã–π</b>",
                reply_markup=menu
            )
        else:
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏ –≤—ã–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
            async with db_pool.acquire() as conn:
                await conn.execute('''
                    DELETE FROM spisok WHERE chat_id = $1 AND bot_id = $2;
                ''', chat_id, hashed_token)
            await nowi(message)
    else:
        await nowi(message)

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=['admin'], state="*")
async def adm(message: types.Message, state: FSMContext):
    await message.answer(f"üì¢ <b>–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ !!!</b>", reply_markup=cicada_kb)
    await state.finish()

@dp.callback_query_handler(text="cislo", state="*")
async def ref(call: types.CallbackQuery, state: FSMContext):
    await load_botttt()
    await call.message.answer(f"<b>–í –±–∞–∑–µ —Å–µ–π—á–∞—Å {len(botttt)} –±–æ—Ç–æ–≤</b>")

@dp.callback_query_handler(text="delll", state="*")
async def ref(call: types.CallbackQuery, state: FSMContext):
    try:
        async with db_pool.acquire() as conn:
            await conn.execute(f'DELETE FROM {bot_table_name};')
        async with botttt_lock:
            botttt.clear()
        await state.finish()
        await call.message.answer("üì¢ <b>–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –æ—á–∏—â–µ–Ω!</b>")
    except Exception as e:
        print(f"Error clearing bot list: {e}")
        await call.message.answer("<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤.</b>")

@dp.callback_query_handler(text="addd", state="*")
async def ref(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.answer("üì¢ <b>–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:</b>")
    await akasil.sms_text.set()

@dp.message_handler(state=akasil.sms_text)
async def input_text_for_ad(message: types.Message, state: FSMContext):
    ff = message.text
    ls = ff.strip().split('\n')
    dead_bots = []
    new_bots = []

    for x in ls:
        x = x.strip()
        # –ü–∞—Ä—Å–∏–Ω–≥ —é–∑–µ—Ä–Ω–µ–π–º–∞ –±–æ—Ç–∞
        if x.startswith('https://t.me/'):
            xxx = x.split('https://t.me/')[-1]
        elif x.startswith('@'):
            xxx = x[1:]
        else:
            xxx = x
        xxx = xxx.strip()

        if await is_bot_alive(xxx):
            new_bots.append(xxx)
        else:
            dead_bots.append(xxx)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        await update_botttt(new_bots)
    except Exception as e:
        print(f"Error updating bot list in database: {e}")
        await message.answer("<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>")
        return

    await state.finish()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    added_count = len(new_bots)
    total_count = len(ls)
    msg = f"üì¢ <b>–ë—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –±–æ—Ç–æ–≤ –∏–∑ {total_count}!</b>"
    if dead_bots:
        dead_bots_list = '\n'.join(dead_bots)
        msg += f"\n\n<b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã:</b>\n{dead_bots_list}"
    await message.answer(msg)

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
async def on_startup(dp):
    global db_pool
    db_pool = await asyncpg.create_pool(DATABASE_URL)
    await create_tables()
    await load_botttt()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
async def on_shutdown(dp):
    await db_pool.close()
    print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

  
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
